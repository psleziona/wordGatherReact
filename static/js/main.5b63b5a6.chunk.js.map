{"version":3,"sources":["Nav.js","Main.js","QuickRoundControls.js","QuickRoundHint.js","QuickRoundAnswer.js","QuickRoundStats.js","QuickRound.js","QuickRoundContainer.js","TestAnswer.js","TestObject.js","TestContainer.js","Test.js","ProgressBar.js","WordStat.js","User.js","Login.js","Register.js","App.js","index.js"],"names":["Nav","props","this","isLogged","className","to","username","Component","Main","QuickRoundControls","disabled","isStarted","onClick","toggleStart","QuickRoundHint","answers","map","word","i","QuickRoundAnswer","handleKeyPress","e","key","answer","target","value","checkAnswer","answerStat","rightAnswers","includes","state","showHint","wrongCounter","setState","update","handleChange","inputValue","handleHint","nextProps","htmlFor","onChange","onKeyPress","type","name","QuickRoundStats","total","right","QuickRound","updateDb","prevState","updateAnswers","answerObj","length","words","wordObj","Math","floor","random","meanings","reduce","sum","element","Object","values","QuickRoundContainer","getWords","fetch","credentials","then","res","json","data","stats","method","mode","body","JSON","stringify","prevProps","TestAnswer","handleClick","isTrue","onAnswer","innerText","console","log","isAnsweredRight","answerable","prvState","bgClass","TestObject","handleAnswer","isRight","rightAnswer","TestContainer","gatherData","notAnswered","tests","forEach","elem","english_word","filter","obj","push","updateStatus","status","handleSend","right_answers","false_answers","sort","Test","getData","count","testArray","isDataSend","countValue","clearDataAfterUpdate","ProgressBar","percentageProgress","progress","toFixed","style","width","WordStat","counter","User","apiKey","Login","handleSubmit","preventDefault","form","FormData","append","login","password","handleLogin","handleInput","loginTester","testLoginForm","onSubmit","Register","validData","confirmPassword","email","confirmEmail","registerForm","alert","App","getUserData","basename","process","path","exact","render","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b63b5a6.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport './styles/Nav.scss';\n\nclass Nav extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (this.props.isLogged) {\n            return (\n                <nav className='nav'>\n                    <ul className='nav__links'>\n                        <Link className='nav__anchor' to='/'>\n                            <li className='nav__link'>Home</li>\n                        </Link>\n                        <Link className='nav__anchor' to='/quick-round'>\n                            <li className='nav__link'>Quick</li>\n                        </Link>\n                        <Link className='nav__anchor' to='/test-multi'>\n                            <li className='nav__link'>Multi test</li>\n                        </Link>\n                        <Link className='nav__anchor' to='/user'>\n                            <li className='nav__link'>{this.props.username}</li>\n                        </Link>\n                    </ul>\n                </nav>\n            )\n        } else {\n            return (\n                <nav className='nav'>\n                    <ul className='nav__links'>\n                        <Link className='nav__anchor' to='/'>\n                            <li className='nav__link'>Home</li>\n                        </Link>\n                        <Link className='nav__anchor' to='/login'>\n                            <li className='nav__link'>Login</li>\n                        </Link>\n                        <Link className='nav__anchor' to='/register'>\n                            <li className='nav__link'>Register</li>\n                        </Link>\n                    </ul>\n                </nav>\n            )\n        }\n    }\n\n}\n\nexport default Nav;","import { Component } from \"react\";\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Witaj {this.props.username}</h2>\n                <p>W budowie</p>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import { Component } from \"react\";\nimport './styles/QuickRound.scss';\n\nclass QuickRoundControls extends Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <div className='quickround__controls'>\n                <button className='quickround__btn quickround__btn--start' disabled={this.props.isStarted} onClick={this.props.toggleStart}>Start</button>\n                <button className='quickround__btn quickround__btn--finish' disabled={!this.props.isStarted} onClick={this.props.toggleStart}>Finish</button>\n            </div>\n        )\n    }\n}\n\nexport default QuickRoundControls;","import { Component } from \"react\";\nimport './styles/QuickRound.scss';\n\nclass QuickRoundHint extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return(\n            <ul className='quickround__hints-list'>\n                {this.props.answers.map((word, i) => <li className='quickround__hints-item' key={i}>{word}</li>)}\n            </ul>\n        )\n    }\n}\n\nexport default QuickRoundHint;","import { Component } from \"react\";\nimport QuickRoundHint from './QuickRoundHint';\nimport './styles/QuickRound.scss';\n\nclass QuickRoundAnswer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            wrongCounter: 0,\n            inputValue: '',\n            showHint: false\n        }\n    }\n\n    handleKeyPress = e => {\n        if (e.key == 'Enter') {\n            const answer = e.target.value;\n            this.checkAnswer(answer);\n        }\n    }\n\n    checkAnswer = answer => {\n        let answerStat = {};\n        if (this.props.rightAnswers.includes(answer) && !this.state.showHint) {\n            answerStat = { [this.props.word]: true }\n        } else {\n            if (this.state.wrongCounter > 2) {\n                answerStat = { [this.props.word]: false }\n            } else {\n                this.setState({\n                    wrongCounter: this.state.wrongCounter + 1\n                })\n                return 0\n            }\n        }\n        this.props.update(answerStat);\n    }\n\n    componentDidUpdate(nextProps) {\n        if (nextProps != this.props) {\n            this.setState({\n                wrongCounter: 0,\n                inputValue: '',\n                showHint: false\n            })\n        }\n    }\n\n    handleChange = e => {\n        this.setState({\n            inputValue: e.target.value\n        })\n    }\n\n    handleHint = () => {\n        this.setState({\n            showHint: true\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h3 className='quickround__word-title'>{this.props.word}</h3>\n                <label htmlFor='answer'>\n                    <input className='quickround__answer-input' value={this.state.inputValue} onChange={this.handleChange} onKeyPress={this.handleKeyPress} type='text' name='answer' />\n                </label>\n                <p>Wrong answer counter: {this.state.wrongCounter}</p>\n                {this.state.wrongCounter == 3?<button className='quickround__btn' onClick={this.handleHint}>Show answers</button>: null}\n                {this.state.showHint?<QuickRoundHint answers={this.props.rightAnswers} />:null}\n            </div>\n        )\n    }\n}\n\nexport default QuickRoundAnswer;","import { Component } from \"react\";\nimport './styles/QuickRound.scss';\n\nclass QuickRoundStats extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className='quickround__stats'>\n                <p>Total: {this.props.total}</p>\n                <p>Right: {this.props.right}</p>\n            </div>\n        )\n    }\n}\n\nexport default QuickRoundStats;","import { Component } from \"react\";\nimport QuickRoundControls from './QuickRoundControls';\nimport QuickRoundAnswer from './QuickRoundAnswer';\nimport QuickRoundStats from './QuickRoundStats';\nimport './styles/QuickRound.scss';\n\nclass QuickRound extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isStarted: false,\n            answers: []\n        }\n    }\n\n    toggleStart = () => {\n        if (this.state.isStarted) {\n            this.props.updateDb(this.state.answers);\n        }\n        this.setState(prevState => {\n            return {\n                isStarted: !prevState.isStarted,\n                answers: []\n            }\n        })\n    }\n\n    updateAnswers = answerObj => {\n        this.setState(prevState => {\n            return {\n                answers: [...prevState.answers, answerObj]\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        if(this.state.answers.length > 0) {\n            this.props.updateDb(this.state.answers);\n        }\n    }\n\n    render() {\n        let word = '';\n        let rightAnswers = '';\n        if (this.props.words.length > 0) {\n            const wordObj = this.props.words[Math.floor(Math.random() * this.props.words.length)]\n            word = wordObj.word;\n            rightAnswers = wordObj.meanings;\n        }\n        const total = this.state.answers.length;\n        const right = this.state.answers.reduce((sum, element) => {\n            let isRight = Object.values(element)[0];\n            return isRight?sum + 1: sum;\n        }, 0);\n\n        return (\n            <div className='quickround__container'>\n                <QuickRoundControls isStarted={this.state.isStarted} toggleStart={this.toggleStart} />\n                {this.state.isStarted?<QuickRoundStats total={total} right={right} />:null}\n                {this.state.isStarted?<QuickRoundAnswer word={word} rightAnswers={rightAnswers} update={this.updateAnswers} />:null}\n            </div>\n        )\n    }\n}\n\nexport default QuickRound;","import { Component } from \"react\";\nimport QuickRound from './QuickRound';\n\nclass QuickRoundContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            words: []\n        }\n    }\n\n    getWords = () => {\n        fetch('https://word-gather.herokuapp.com/words', {\n            credentials: 'include'\n        })\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    words: data\n                })\n            })\n    }\n\n    updateDb = stats => {\n        if (stats.length > 0) {\n            fetch('https://word-gather.herokuapp.com/words', {\n                method: 'POST',\n                credentials: 'include',\n                mode: 'cors',\n                body: JSON.stringify(stats)\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.getWords();\n    }\n\n    shouldComponentUpdate(prevProps, prevState) {\n        if (prevState == this.state) {\n            return false;\n        }\n        return true;\n    }\n\n    render() {\n        return (\n            <QuickRound words={this.state.words} updateDb={this.updateDb} />\n        )\n    }\n}\n\nexport default QuickRoundContainer;","import { Component } from \"react\";\nimport './styles/Test.scss';\n\nclass TestAnswer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAnsweredRight: null\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.answerable == false && this.props.answerable == true) {\n            this.setState(prvState => {\n                return {\n                    isAnsweredRight: null\n                }\n            })\n        }\n    }\n\n    handleClick = e => {\n        const isTrue = this.props.onAnswer(e.target.innerText);\n        console.log(isTrue);\n        if (isTrue) {\n            this.setState(prevState => {\n                return {\n                    isAnsweredRight: true\n                }\n            })\n        } else {\n            this.setState(prevState => {\n                return {\n                    isAnsweredRight: false\n                }\n            })\n        }\n    }\n\n    render() {\n        const answerable = this.props.answerable;\n        let bgClass = '';\n        if (this.state.isAnsweredRight) {\n            bgClass = 'test-container__answer--right';\n        } else if (this.state.isAnsweredRight == false) {\n            bgClass = 'test-container__answer--wrong';\n        }\n        return (\n            <li className={`test-container__answer ${bgClass}`}\n                onClick={answerable ? this.handleClick : null}>{this.props.answer}</li>\n        )\n    }\n}\n\nexport default TestAnswer;","import { Component } from \"react\";\nimport TestAnswer from './TestAnswer';\nimport './styles/Test.scss';\n\nclass TestObject extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerable: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.rightAnswer !== this.props.rightAnswer) {\n            this.setState(prevState => {\n                return {\n                    answerable: true\n                }\n            })\n        }\n    }\n\n    handleAnswer = answer => {\n        this.setState(prevState => {\n            return {\n                answerable: false\n            }\n        })\n        const isRight = answer == this.props.rightAnswer ? true : false;\n        this.props.onAnswer(this.props.word, isRight);\n        return isRight\n    }\n\n    render() {\n        return (\n            <div className='test-container'>\n                <h4 className='test-container__title'>{this.props.word}</h4>\n                <ul className='test-container__answers'>\n                    {this.props.answers.map((answer, i) => <TestAnswer\n                        onAnswer={this.handleAnswer}\n                        key={i} answer={answer} answerable={this.state.answerable} />)}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default TestObject;","import { Component } from \"react\";\nimport TestObject from \"./TestObject\";\nimport './styles/Test.scss';\n\nclass TestContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: []\n        }\n    }\n\n\n    gatherData = (word, right) => {\n        this.setState(prevState => {\n            return {\n                answers: [...prevState.answers, { [word]: right }]\n            }\n        })\n    }\n\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.tests == this.props.tests) {\n            return false;\n        }\n        return true;\n    }\n\n    handleClick = () => {\n        let notAnswered = [];\n        this.props.tests.forEach(elem => {\n            let word = elem.english_word;\n            let x = this.state.answers.filter((obj) => {\n                return word in obj;\n            });\n            if (x.length == 0) {\n                notAnswered.push({ [word]: false })\n            }\n        });\n        this.setState(prevState => {\n            return {\n                answers: [...prevState.answers, ...notAnswered]\n            }\n        }, this.updateStatus)\n    }\n\n    updateStatus = () => {\n        fetch('https://word-gather.herokuapp.com/words', {\n            method: 'POST',\n            body: JSON.stringify(this.state.answers),\n            credentials: 'include',\n            mode: 'cors'\n        })\n            .then(res => {\n                if (res.status == 200) {\n                    this.props.handleSend();\n                }\n            })\n    }\n\n\n    render() {\n        const tests = this.props.tests.map((elem, i) => {\n            const { english_word, right_answers, false_answers } = elem;\n            const rightAnswer = right_answers[Math.floor(Math.random() * right_answers.length)];\n            let answers = [rightAnswer, ...false_answers];\n            answers = answers.sort(() => Math.random() - .5);\n            return (\n                <TestObject key={i} word={english_word}\n                    answers={answers} rightAnswer={rightAnswer} onAnswer={this.gatherData} />\n            )\n        })\n\n        return (\n            <div className='multitest__container'>\n                {tests}\n                <button className='multitest__btn multitest__btn--finish' onClick={this.handleClick}>Finish</button>\n            </div>\n        )\n    }\n}\n\nexport default TestContainer;","import { Component } from \"react\";\nimport TestContainer from \"./TestContainer\";\nimport './styles/Test.scss';\n\nclass Test extends Component {\n    constructor() {\n        super();\n        this.state = {\n            countValue: '5',\n            testArray: [],\n            isDataSend: false\n        }\n    }\n\n    getData = count => {\n        fetch(`https://word-gather.herokuapp.com/test-words/${count}`, {\n            credentials: 'include'\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                testArray: data,\n                isDataSend: false\n            });\n        });\n    }\n\n    handleClick = () => {\n        this.getData(this.state.countValue);\n    }\n\n    handleChange = e => {\n        this.setState({\n            countValue: e.target.value\n        });\n    }\n\n    clearDataAfterUpdate = () => {\n        this.setState({\n            testArray: [],\n            isDataSend: true\n        });\n    }\n\n\n    render() {\n        if (this.state.testArray.length == 0) {        \n        return (\n            <div className='multitest__container'>\n                {this.state.isDataSend?<p>Odpowiedzi wysłane!</p>:null}\n                <p>Wybierz ilość słówek</p>\n                <select className='multitest__select-count' onChange={this.handleChange}>\n                    <option value='5'>5</option>\n                    <option value='10'>10</option>\n                    <option value='20'>20</option>\n                </select>\n                <button className='multitest__btn' onClick={this.handleClick}>Start</button>\n            </div>\n        )\n        } else {\n            return <TestContainer tests={this.state.testArray} handleSend={this.clearDataAfterUpdate} />\n        }\n    }\n}\n\nexport default Test;","import { Component } from \"react\";\nimport './styles/ProgressBar.scss';\n\nclass ProgressBar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const percentageProgress = (this.props.progress * 100).toFixed(2) //%\n        return (\n            <div className='progress-bar'>\n                <p className='progress-text'>{percentageProgress} %</p>\n                <div style={{width: `${percentageProgress}%`}} className='show-progress'></div>\n            </div>\n        )\n    }\n}\n\nexport default ProgressBar;","import { Component } from \"react\";\nimport ProgressBar from './ProgressBar';\nimport './styles/User.scss';\n\nclass WordStat extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <ul className='word-stat__list'>\n                <li className='word-stat__item'><h3 className='word-stat__word'>{this.props.word}</h3></li>\n                <li className='word-stat__item'>Showed: {this.props.counter} times</li>\n                <li className='word-stat__item'><p>Progress</p></li>\n                <ProgressBar progress={this.props.progress} />\n            </ul>\n        )\n    }\n}\n\nexport default WordStat;","import { Component } from \"react\";\nimport WordStat from './WordStat';\nimport './styles/User.scss';\n\nclass User extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.update();\n    }\n\n    render() {\n        return (\n            <div className='user-page__container'>\n                <p>Api-key: {this.props.data.apiKey}</p>\n                {this.props.data.stats.map((elem, i) =>\n                    <WordStat key={i} word={elem.word} counter={elem.counter} progress={elem.progress} />)}\n            </div>\n        )\n    }\n}\n\nexport default User;","import { Component } from \"react\";\nimport './styles/Login.scss';\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            login: '',\n            password: ''\n        }\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        let form = new FormData()\n        form.append('name', this.state.login)\n        form.append('password', this.state.password)\n        fetch('https://word-gather.herokuapp.com/login', {\n            method: 'POST',\n            body: form,\n            credentials: 'include'\n        })\n            .then(res => {\n                if (res.status == 200) {\n                    this.props.handleLogin();\n                }\n            })\n    }\n\n    handleInput = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    loginTester = () => {\n        let testLoginForm = new FormData()\n        testLoginForm.append('name', 'pablo');\n        testLoginForm.append('password', 'a');\n        fetch('https://word-gather.herokuapp.com/login', {\n            method: 'POST',\n            body: testLoginForm,\n            credentials: 'include'\n        })\n            .then(res => {\n                if (res.status == 200) {\n                    this.props.handleLogin();\n                }\n            })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor='login'>\n                    Username<input onChange={this.handleInput} name='login' />\n                </label>\n                <label htmlFor='password'>\n                    Password<input type='password' onChange={this.handleInput} name='password' />\n                </label>\n                <label htmlFor='submit'>\n                    <input type='submit' value='Login' />\n                </label>\n                <button onClick={this.loginTester}>Tester login</button>\n            </form>\n        )\n    }\n}\n\nexport default Login;","import { Component } from \"react\";\nimport './styles/Register.scss';\n\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n            username: '',\n            password: '',\n            confirmPassword: '',\n            email: '',\n            confirmEmail: ''\n        }\n    }\n\n    handleInput = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    validData = () => {\n        const {username, password, confirmPassword, email, confirmEmail} = this.state;\n        if (password != confirmPassword) {\n            return false\n        }\n        if (email != confirmEmail) {\n            return false\n        }\n        if (!email.includes('@')) {\n            return false\n        }\n        return true\n    }\n\n    handleSubmit = e => {\n        e.preventDefault()\n        if (this.validData) {\n            let registerForm = new FormData()\n            registerForm.append('username', this.state.username)\n            registerForm.append('password', this.state.password)\n            registerForm.append('e-mail', this.state.email)\n            fetch('https://word-gather.herokuapp.com/register', {\n                method: 'POST',\n                body: registerForm\n            })\n        } else {\n            alert('Błędnie wypełniony formularz')\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor='username'>\n                    Username<input type='text' onChange={this.handleInput} name='username' />\n                </label>\n                <label htmlFor='password'>\n                    Password<input type='password' onChange={this.handleInput} name='password' />\n                </label>\n                <label htmlFor='confirmPassword'>\n                    Confirm password<input type='password' onChange={this.handleInput} name='confirmPassword' />\n                </label>\n                <label htmlFor='email' type='text'>\n                    E-mail<input onChange={this.handleInput} name='email' />\n                </label>\n                <label htmlFor='confirmEmail' type='text'>\n                    Confirm e-mail<input onChange={this.handleInput} name='confirmEmail' />\n                </label>\n                <label htmlFor='submit'>\n                    <input type='submit'value='Register' />\n                </label>\n            </form>\n        )\n    }\n}\n\nexport default Register;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Nav from './Nav';\nimport Main from './Main';\nimport QuickRoundContainer from './QuickRoundContainer';\nimport Test from './Test';\nimport User from './User';\nimport Login from './Login';\nimport Register from './Register';\nimport './styles/App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: '',\n      apiKey: '',\n      stats: [],\n      isLogged: false\n    }\n  }\n\n  componentDidMount() {\n    this.getUserData()\n  }\n\n  getUserData = () => {\n    fetch('https://word-gather.herokuapp.com/user', {\n      credentials: 'include',\n      mode: 'cors'\n    })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          username: data.username,\n          apiKey: data['api-key'],\n          stats: data.stats,\n          isLogged: true\n        })\n      })\n  }\n\n  handleLogin = () => {\n    this.setState({\n      isLogged: true\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className='App'>\n          <Nav isLogged={this.state.isLogged} username={this.state.username} />\n          <Switch>\n            <Route path='/' exact render={props => <Main {...props} username={this.state.username} />} />\n            <Route path='/quick-round' component={QuickRoundContainer} />\n            <Route path='/test-multi' component={Test} />\n            <Route path='/user' render={props => <User {...props} data={this.state} update={this.getUserData} />} />\n            <Route path='/login' render={props => <Login {...props} handleLogin={this.handleLogin} />} />\n            <Route path='/register' component={Register} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}